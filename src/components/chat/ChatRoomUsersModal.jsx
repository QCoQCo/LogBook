import React, { useState, useEffect } from 'react';
import { subscribeToRoomUsers } from '../../utils/chatService';
import { useUserData } from '../../context';
import './ChatRoomUsersModal.scss';

const ChatRoomUsersModal = ({ isOpen, onClose, roomName, currentUser }) => {
    const { getUserProfilePhoto } = useUserData();
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        if (!isOpen || !roomName) return;

        setLoading(true);
        setError(null);
        setUsers([]);

        // Ï±ÑÌåÖÎ∞© Ïú†Ï†Ä Î™©Î°ùÏùÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Íµ¨ÎèÖ
        const unsubscribe = subscribeToRoomUsers(
            roomName,
            (activeUsers) => {
                // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÎ•º Îß® ÏúÑÎ°ú Ï†ïÎ†¨ÌïòÍ≥† ÎÇòÎ®∏ÏßÄÎäî Ïù¥Î¶ÑÏàúÏúºÎ°ú Ï†ïÎ†¨
                const sortedUsers = activeUsers.sort((a, b) => {
                    if (a.id === currentUser?.id) return -1;
                    if (b.id === currentUser?.id) return 1;
                    return a.name.localeCompare(b.name);
                });

                setUsers(sortedUsers);
                setLoading(false);
            },
            (error) => {
                console.error('Ïú†Ï†Ä Î™©Î°ù Íµ¨ÎèÖ Ïò§Î•ò:', error);
                setError('Ïú†Ï†Ä Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
                setLoading(false);
            }
        );

        return () => {
            if (unsubscribe) {
                unsubscribe();
            }
        };
    }, [isOpen, roomName, currentUser?.id]);

    // Î™®Îã¨ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
    const handleOverlayClick = (e) => {
        if (e.target === e.currentTarget) {
            onClose();
        }
    };

    const UserProfilePhoto = (user) => {
        return getUserProfilePhoto(user.id, user.name);
    };

    // ESC ÌÇ§Î°ú Î™®Îã¨ Îã´Í∏∞
    useEffect(() => {
        const handleKeyDown = (e) => {
            if (e.key === 'Escape' && isOpen) {
                onClose();
            }
        };

        document.addEventListener('keydown', handleKeyDown);
        return () => document.removeEventListener('keydown', handleKeyDown);
    }, [isOpen, onClose]);

    // ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ Ìï®Ïàò
    const formatTime = (timestamp) => {
        if (!timestamp) return '';

        const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
        const now = new Date();
        const diff = now - date;

        if (diff < 60 * 1000) {
            // 1Î∂Ñ ÎØ∏Îßå
            return 'Î∞©Í∏à Ï†Ñ';
        } else if (diff < 60 * 60 * 1000) {
            // 1ÏãúÍ∞Ñ ÎØ∏Îßå
            const minutes = Math.floor(diff / (60 * 1000));
            return `${minutes}Î∂Ñ Ï†Ñ`;
        } else if (diff < 24 * 60 * 60 * 1000) {
            // 24ÏãúÍ∞Ñ ÎØ∏Îßå
            const hours = Math.floor(diff / (60 * 60 * 1000));
            return `${hours}ÏãúÍ∞Ñ Ï†Ñ`;
        } else {
            return date.toLocaleDateString();
        }
    };

    if (!isOpen) return null;

    return (
        <div className='modal-overlay chat-room-users-modal' onClick={handleOverlayClick}>
            <div className='modal-content'>
                <div className='modal-header'>
                    <h3>
                        <span className='room-indicator'>üë•</span>
                        {roomName} Ï†ëÏÜç Ïú†Ï†Ä
                    </h3>
                    <button className='close-button' onClick={onClose}>
                        √ó
                    </button>
                </div>

                <div className='modal-body'>
                    {loading && (
                        <div className='loading-state'>
                            <div className='loading-spinner'></div>
                            <p>Ïú†Ï†Ä Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
                        </div>
                    )}

                    {error && (
                        <div className='error-state'>
                            <p className='error-message'>{error}</p>
                            <button
                                className='retry-button'
                                onClick={() => window.location.reload()}
                            >
                                Îã§Ïãú ÏãúÎèÑ
                            </button>
                        </div>
                    )}

                    {!loading && !error && (
                        <>
                            <div className='users-count'>
                                Ï¥ù <span className='count-number'>{users.length}</span>Î™ÖÏù¥ Ï†ëÏÜç Ï§ë
                            </div>

                            <div className='users-list'>
                                {users.length === 0 ? (
                                    <div className='no-users'>ÌòÑÏû¨ Ï†ëÏÜçÌïú Ïú†Ï†ÄÍ∞Ä ÏóÜÏäµÎãàÎã§.</div>
                                ) : (
                                    users.map((user) => (
                                        <div
                                            key={user.id}
                                            className={`user-item ${
                                                user.id === currentUser?.id ? 'current-user' : ''
                                            }`}
                                        >
                                            <div className='user-avatar'>
                                                <div className='avatar-circle'>
                                                    <img
                                                        src={
                                                            UserProfilePhoto(user)
                                                                ? UserProfilePhoto(user)
                                                                : '/img/userProfile-ex.png'
                                                        }
                                                        alt='user-avatar'
                                                    />
                                                </div>
                                                <div className='online-indicator'></div>
                                            </div>

                                            <div className='user-info'>
                                                <div className='user-name'>
                                                    {user.name}
                                                    {user.id === currentUser?.id && (
                                                        <span className='current-user-badge'>
                                                            (ÎÇò)
                                                        </span>
                                                    )}
                                                </div>
                                                <div className='user-details'>
                                                    <span className='join-time'>
                                                        ÏûÖÏû•: {formatTime(user.joinedAt)}
                                                    </span>
                                                    {user.lastSeen && (
                                                        <span className='last-seen'>
                                                            ÏµúÍ∑º ÌôúÎèô: {formatTime(user.lastSeen)}
                                                        </span>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    ))
                                )}
                            </div>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ChatRoomUsersModal;
